name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  backend_unit_test:
    name: Backend Unit Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 
        
    - name: Debug requirements
      run: |
        ls -l requirements

    - name: Install dependencies
      run: |
        ls -R
        pip install -r ./requirements/ci.txt   

    - name: Run Pytest Unit Tests
      run: |
        pytest -v ./app/backend/tests/unit/module/test_advanced_search_unit_module.py



  cd_deliver:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: backend_unit_test 

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up QEMU (多架構支援)
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: williamtsai1998  
        password: ${{ secrets.DOCKER_HUB_TOKEN }} 

    - name: Set Image Tag
      id: tag
      run: |
        SHA_TAG=$(echo $GITHUB_SHA | cut -c1-8)
        BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/}) 

        if [ "$BRANCH_NAME" == "main" ]; then
          FLOATING_TAG="latest"
        else
          FLOATING_TAG="$BRANCH_NAME"
        fi
        
        echo "sha_tag=$SHA_TAG" >> $GITHUB_OUTPUT
        echo "branch_tag=$FLOATING_TAG" >> $GITHUB_OUTPUT

    - name: Debug 
      run: |
        ls -R
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: . #專案根目錄
        file: ./app/Dockerfile # Dockerfile 檔案路徑
        platforms: linux/amd64,linux/arm64 # 多架構建構
        push: true
        tags: |
            williamtsai1998/stock-insight-app:${{ steps.tag.outputs.sha_tag }},
            williamtsai1998/stock-insight-app:${{ steps.tag.outputs.branch_tag }}
        

    
  cd_deploy:
    name: Deploy to EC2/Swarm
    runs-on: ubuntu-latest
    needs: cd_deliver 

    steps:
      - name: Deploy to AWS EC2 (Swarm Manager)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "正在部署 Swarm Stack..."
            
            docker stack deploy -c ~/docker-compose.yml stock-insight-stack
            
            echo "部署完成!"
